{"version":3,"sources":["webpack:///./src/views/EmailActionHandler.vue","webpack:///./src/views/EmailActionHandler.vue?dfd2"],"names":["name","mounted","$this","this","$query","$route","query","mode","actionCode","oobCode","continueUrl","lang","auth","window","__firebase","handleResetPassword","handleRecoverEmail","handleVerifyEmail","alert","$router","push","methods","accountEmail","localStorage","setItem","verifyPasswordResetCode","then","email","newPassword","confirmPasswordReset","signInWithEmailAndPassword","catch","error","console","$$router","restoredEmail","checkActionCode","info","applyActionCode","sendPasswordResetEmail","resp","log","render"],"mappings":"+LACA,eAAW,OAII,OACbA,KAAM,uBACNC,QAFa,WAGX,IAAMC,EAAQC,KACRC,EAASF,EAAMG,OAAOC,MAGtBC,EAAOH,EAAOG,KAEdC,EAAaJ,EAAOK,QAEpBC,EAAcN,EAAOM,YAErBC,EAAOP,EAAOO,MAAQ,KAEtBC,EAAOC,OAAOC,WAAWF,OAG/B,OAAQL,GACN,IAAK,gBAEHL,EAAMa,oBAAoBH,EAAMJ,EAAYE,EAAaC,GACzD,MACF,IAAK,eAEHT,EAAMc,mBAAmBJ,EAAMJ,EAAYG,GAC3C,MACF,IAAK,cAEHT,EAAMe,kBAAkBL,EAAMJ,EAAYE,EAAaC,GACvD,MACF,SACE,WACIO,MAAM,wBACCL,OAAOM,QAAQC,KAAK,MAF/B,KAMNC,QAAS,CACLN,oBADK,SACeH,EAAMJ,EAAYE,EAAaC,GAC/C,IAGJW,EAHUpB,EAAQC,KACtBU,OAAOU,aAAaC,QAAQ,OAAQb,GAIpCC,EAAKa,wBAAwBjB,GAAYkB,MAAK,SAAAC,GAC5CL,EAAeK,EAIf,IAAIC,EAAc,GAGlBhB,EAAKiB,qBAAqBrB,EAAYoB,GAAaF,MAAK,WAEtDd,EAAKkB,2BAA2BR,EAAcM,GAAaF,MAAK,WAC5D,GAAIhB,EAAa,OAAOR,EAAMiB,QAAQC,KAAKV,SAG9CqB,OAAM,SAAAC,GAIP,OADAC,QAAQD,MAAMA,GACP9B,EAAMgC,SAASd,KAAK,WAE5BW,OAAM,SAAAC,GAIP,OADAC,QAAQD,MAAMA,GACP9B,EAAMgC,SAASd,KAAK,SAG/BJ,mBAlCW,SAkCQJ,EAAMJ,EAAYG,GAGnCE,OAAOU,aAAaC,QAAQ,OAAQb,GACpC,IAAIwB,EAAgB,GAEpBvB,EAAKwB,gBAAgB5B,GAAYkB,MAAK,SAASW,GAK7C,OAHAF,EAAgBE,EAAK,QAAQ,SAGtBzB,EAAK0B,gBAAgB9B,MAC3BkB,MAAK,WAONd,EAAK2B,uBAAuBJ,GAAeT,MAAK,eAE7CK,OAAM,SAASC,GAEhB,OAAOC,QAAQD,MAAMA,SAEtBD,OAAM,SAASC,GAEhB,OAAOC,QAAQD,MAAMA,OAGzBf,kBAhEW,SAgEOL,EAAMJ,EAAYE,EAAaC,GAG/CE,OAAOU,aAAaC,QAAQ,OAAQb,GAGpCC,EAAK0B,gBAAgB9B,GAAYkB,MAAK,SAASc,GAS7C,OAAOP,QAAQQ,IAAID,EAAM9B,MACxBqB,OAAM,SAASC,GAGhB,OAAOC,QAAQD,MAAMA,SC3HzB,EAAOU,OAASA,EAED","file":"js/email-action-handler.17c36508.js","sourcesContent":["<template>\n<div></div>\n</template>\n\n<script>\nexport default {\n  name: \"email-action-handler\",\n  mounted() {\n    const $this = this;\n    const $query = $this.$route.query;\n\n    // Get the action to complete.\n    const mode = $query.mode;\n    // Get the one-time code from the query parameter.\n    const actionCode = $query.oobCode;\n    // (Optional) Get the continue URL from the query parameter if available.\n    const continueUrl = $query.continueUrl;\n    // (Optional) Get the language code if available.\n    const lang = $query.lang || \"en\";\n\n    const auth = window.__firebase.auth();\n\n    // Handle the user management action.\n    switch (mode) {\n      case \"resetPassword\":\n        // Display reset password handler and UI.\n        $this.handleResetPassword(auth, actionCode, continueUrl, lang);\n        break;\n      case \"recoverEmail\":\n        // Display email recovery handler and UI.\n        $this.handleRecoverEmail(auth, actionCode, lang);\n        break;\n      case \"verifyEmail\":\n        // Display email verification handler and UI.\n        $this.handleVerifyEmail(auth, actionCode, continueUrl, lang);\n        break;\n      default:\n        (() => {\n            alert(\"Invalid Email Action\");\n            return window.$router.push(\"/\");\n            })();\n    }\n  },\n  methods: {\n      handleResetPassword(auth, actionCode, continueUrl, lang) {\n          const $this = this;\n  window.localStorage.setItem(\"lang\", lang)\n\n  var accountEmail;\n  // Verify the password reset code is valid.\n  auth.verifyPasswordResetCode(actionCode).then(email => {\n    accountEmail = email;\n\n    // TODO: Show the reset screen with the user's email and ask the user for\n    // the new password.\n    let newPassword = '';\n\n    // Save the new password.\n    auth.confirmPasswordReset(actionCode, newPassword).then(() => {\n\n      auth.signInWithEmailAndPassword(accountEmail, newPassword).then(() => {\n          if (continueUrl) return $this.$router.push(continueUrl);\n      });\n\n    }).catch(error => {\n      // Error occurred during confirmation. The code might have expired or the\n      // password is too weak.\n      console.error(error);\n      return $this.$$router.push(\"/\");\n    });\n  }).catch(error => {\n    // Invalid or expired action code. Ask user to try to reset the password\n    // again.\n    console.error(error);\n    return $this.$$router.push(\"/\");\n  });\n},\nhandleRecoverEmail(auth, actionCode, lang) {\n  // Localize the UI to the selected language as determined by the lang\n  // parameter.\n  window.localStorage.setItem(\"lang\", lang);\n  var restoredEmail = '';\n  // Confirm the action code is valid.\n  auth.checkActionCode(actionCode).then(function(info) {\n    // Get the restored email address.\n    restoredEmail = info['data']['email'];\n\n    // Revert to the old email.\n    return auth.applyActionCode(actionCode);\n  }).then(function() {\n    // Account email reverted to restoredEmail\n\n    // TODO: Display a confirmation message to the user.\n\n    // You might also want to give the user the option to reset their password\n    // in case the account was compromised:\n    auth.sendPasswordResetEmail(restoredEmail).then(function() {\n      // Password reset confirmation sent. Ask user to check their email.\n    }).catch(function(error) {\n      // Error encountered while sending password reset code.\n      return console.error(error)\n    });\n  }).catch(function(error) {\n    // Invalid code.\n    return console.error(error)\n  });\n},\nhandleVerifyEmail(auth, actionCode, continueUrl, lang) {\n  // Localize the UI to the selected language as determined by the lang\n  // parameter.\n  window.localStorage.setItem(\"lang\", lang);\n\n  // Try to apply the email verification code.\n  auth.applyActionCode(actionCode).then(function(resp) {\n    // Email address has been verified.\n\n    // TODO: Display a confirmation message to the user.\n    // You could also provide the user with a link back to the app.\n\n    // TODO: If a continue URL is available, display a button which on\n    // click redirects the user back to the app via continueUrl with\n    // additional state determined from that URL's parameters.\n    return console.log(resp, continueUrl);\n  }).catch(function(error) {\n    // Code is invalid or expired. Ask the user to verify their email address\n    // again.\n    return console.error(error);\n  });\n}\n  }\n};\n\n</script>\n\n<style>\n\n</style>","import { render } from \"./EmailActionHandler.vue?vue&type=template&id=5c4bc2a8\"\nimport script from \"./EmailActionHandler.vue?vue&type=script&lang=js\"\nexport * from \"./EmailActionHandler.vue?vue&type=script&lang=js\"\nscript.render = render\n\nexport default script"],"sourceRoot":""}